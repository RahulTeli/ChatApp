{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/ChatApplication/FrontEnd/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.message$ = new BehaviorSubject([]);\n    this.ConnectedUsers$ = new BehaviorSubject([]); /// BehaviourSubject is used to transfer data to unconnected component\n    this.messages = [];\n    this.users = [];\n    this.connection = new signalR.HubConnectionBuilder().withUrl(\"http://localhost:5000/chat\").configureLogging(signalR.LogLevel.Information).build();\n    this.start();\n    this.connection.on(\"ReceiveMessage\", (user, message, messageTime) => {\n      this.messages = [...this.messages, {\n        user,\n        message,\n        messageTime\n      }];\n      this.message$.next(this.messages);\n    });\n    this.connection.on(\"ConnectedUser\", users => {\n      this.ConnectedUsers$.next(users);\n    });\n  }\n  //start connection\n  start() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.connection.start();\n        console.warn(\"Connection Established\");\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }\n  //join room\n  joinRoom(user, room) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.connection.invoke(\"JoinRoom\", {\n        user,\n        room\n      }); // calling JoinRoom method of backend by providing values as argument\n    })();\n  }\n  // send message\n  sendMessage(message) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.connection.invoke(\"SendMessage\", message);\n    })();\n  }\n  //leave chat\n  leaveChat() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.connection.stop();\n    })();\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signalR","BehaviorSubject","ChatService","constructor","message$","ConnectedUsers$","messages","users","connection","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","start","on","user","message","messageTime","next","_this","_asyncToGenerator","console","warn","error","log","joinRoom","room","_this2","invoke","sendMessage","_this3","leaveChat","_this4","stop","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\ChatApplication\\FrontEnd\\ClientApp\\src\\app\\Services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  public message$  = new BehaviorSubject<any>([]);\n  public ConnectedUsers$ = new BehaviorSubject<string[]>([]);   /// BehaviourSubject is used to transfer data to unconnected component\n  public messages :any[] = [];\n  public users:string[] = [];\n\n  constructor() { \n    this.start();\n    this.connection.on(\"ReceiveMessage\",(user:string,message:string,messageTime:string)=>{\n\n      this.messages = [...this.messages,{user,message,messageTime}];\n\n      this.message$.next(this.messages);\n\n    });\n\n    this.connection.on(\"ConnectedUser\",(users:any)=>{\n    this.ConnectedUsers$.next(users);\n    })\n\n  }\n\n  public connection:signalR.HubConnection = new signalR.HubConnectionBuilder().withUrl(\"http://localhost:5000/chat\")\n  .configureLogging(signalR.LogLevel.Information).build();\n\n  //start connection\n  public async start()\n  {\n    try{\n      await this.connection.start();\n      console.warn(\"Connection Established\");\n      \n    }\n    catch(error){\n      console.log(error);\n      \n    }\n  }\n\n  //join room\n  public async joinRoom(user:string,room:string)\n  {\n\n    return this.connection.invoke(\"JoinRoom\",{user,room});  // calling JoinRoom method of backend by providing values as argument\n  }\n \n\n  // send message\n  public async sendMessage(message:string)\n  {\n    return this.connection.invoke(\"SendMessage\",message);\n  }\n\n\n  //leave chat\n  public async leaveChat()\n  {\n    return this.connection.stop();\n  }\n\n\n\n\n\n\n\n}\n"],"mappings":";AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAC7C,SAASC,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,WAAW;EAOtBC,YAAA;IALO,KAAAC,QAAQ,GAAI,IAAIH,eAAe,CAAM,EAAE,CAAC;IACxC,KAAAI,eAAe,GAAG,IAAIJ,eAAe,CAAW,EAAE,CAAC,CAAC,CAAG;IACvD,KAAAK,QAAQ,GAAU,EAAE;IACpB,KAAAC,KAAK,GAAY,EAAE;IAkBnB,KAAAC,UAAU,GAAyB,IAAIR,OAAO,CAACS,oBAAoB,EAAE,CAACC,OAAO,CAAC,4BAA4B,CAAC,CACjHC,gBAAgB,CAACX,OAAO,CAACY,QAAQ,CAACC,WAAW,CAAC,CAACC,KAAK,EAAE;IAhBrD,IAAI,CAACC,KAAK,EAAE;IACZ,IAAI,CAACP,UAAU,CAACQ,EAAE,CAAC,gBAAgB,EAAC,CAACC,IAAW,EAACC,OAAc,EAACC,WAAkB,KAAG;MAEnF,IAAI,CAACb,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ,EAAC;QAACW,IAAI;QAACC,OAAO;QAACC;MAAW,CAAC,CAAC;MAE7D,IAAI,CAACf,QAAQ,CAACgB,IAAI,CAAC,IAAI,CAACd,QAAQ,CAAC;IAEnC,CAAC,CAAC;IAEF,IAAI,CAACE,UAAU,CAACQ,EAAE,CAAC,eAAe,EAAET,KAAS,IAAG;MAChD,IAAI,CAACF,eAAe,CAACe,IAAI,CAACb,KAAK,CAAC;IAChC,CAAC,CAAC;EAEJ;EAKA;EACaQ,KAAKA,CAAA;IAAA,IAAAM,KAAA;IAAA,OAAAC,iBAAA;MAEhB,IAAG;QACD,MAAMD,KAAI,CAACb,UAAU,CAACO,KAAK,EAAE;QAC7BQ,OAAO,CAACC,IAAI,CAAC,wBAAwB,CAAC;OAEvC,CACD,OAAMC,KAAK,EAAC;QACVF,OAAO,CAACG,GAAG,CAACD,KAAK,CAAC;;IAEnB;EACH;EAEA;EACaE,QAAQA,CAACV,IAAW,EAACW,IAAW;IAAA,IAAAC,MAAA;IAAA,OAAAP,iBAAA;MAG3C,OAAOO,MAAI,CAACrB,UAAU,CAACsB,MAAM,CAAC,UAAU,EAAC;QAACb,IAAI;QAACW;MAAI,CAAC,CAAC,CAAC,CAAE;IAAA;EAC1D;EAGA;EACaG,WAAWA,CAACb,OAAc;IAAA,IAAAc,MAAA;IAAA,OAAAV,iBAAA;MAErC,OAAOU,MAAI,CAACxB,UAAU,CAACsB,MAAM,CAAC,aAAa,EAACZ,OAAO,CAAC;IAAC;EACvD;EAGA;EACae,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAZ,iBAAA;MAEpB,OAAOY,MAAI,CAAC1B,UAAU,CAAC2B,IAAI,EAAE;IAAC;EAChC;EAAC,QAAAC,CAAA,G;qBA3DUlC,WAAW;EAAA;EAAA,QAAAmC,EAAA,G;WAAXnC,WAAW;IAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}